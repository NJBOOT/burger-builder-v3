{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","buttonType","handleClick","checkoutCancel","checkoutContinue","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","handleOrder","e","preventDefault","formData","key","order","price","totalPrice","orderData","userId","onOrderBurger","token","handleInputChange","id","target","elCopy","updateObject","checkValidity","formCopy","el","setState","formElArray","this","push","config","form","onSubmit","map","Input","handleChange","invalid","shouldValidate","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","actions","withErrorHandler","axios","Checkout","handleCheckoutCancel","history","goBack","handleCheckoutContinue","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputEl","inputClasses","InputElement","Invalid","join","onChange","option","i","validationError","ValidationError","Label","label","module","exports"],"mappings":"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","file":"static/js/3.8add199f.chunk.js","sourcesContent":["import React from \"react\";\nimport classes from \"./CheckoutSummary.module.css\";\nimport Burger from \"../../Burger/Burger\";\nimport Button from \"../../UI/Button/Button\";\nconst CheckoutSummary = props => {\n  return (\n    <div className={classes.CheckoutSummary}>\n      <h1>We hope it's tasty!</h1>\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\n        <Burger ingredients={props.ingredients} />\n      </div>\n      <Button buttonType=\"Danger\" handleClick={props.checkoutCancel}>\n        CANCEL\n      </Button>\n      <Button buttonType=\"Success\" handleClick={props.checkoutContinue}>\n        CONTINUE\n      </Button>\n    </div>\n  );\n};\n\nexport default CheckoutSummary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"../../../axiosOrders\";\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\nimport classes from \"./ContactData.module.css\";\nimport Button from \"../../../components/UI/Button/Button\";\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\nimport Input from \"../../../components/UI/Input/Input\";\nimport withErrorHandler from \"../../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../../store/actions\";\n\nclass ContactData extends Component {\n  state = {\n    orderForm: {\n      name: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Name\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      street: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Your Street\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      zipCode: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Zip Code\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 5,\n          maxLength: 5,\n        },\n        valid: false,\n        touched: false,\n      },\n      country: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"text\",\n          placeholder: \"Country\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Your Email\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      deliveryMethod: {\n        elementType: \"select\",\n        elementConfig: {\n          options: [\n            { value: \"fastest\", displayValue: \"Fastest\" },\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\n          ],\n        },\n        value: \"fastest\",\n        valid: true,\n        validation: {},\n      },\n    },\n    formIsValid: false,\n  };\n\n  handleOrder = e => {\n    e.preventDefault();\n\n    const formData = {};\n    for (let key in this.state.orderForm) {\n      formData[key] = this.state.orderForm[key].value;\n    }\n    const order = {\n      ingredients: this.props.ingredients,\n      price: this.props.totalPrice,\n      orderData: formData,\n      userId: this.props.userId,\n    };\n    this.props.onOrderBurger(order, this.props.token);\n  };\n\n  handleInputChange = (e, id) => {\n    const { value } = e.target;\n    const elCopy = updateObject(this.state.orderForm[id], {\n      value: value,\n      valid: checkValidity(value, this.state.orderForm[id].validation),\n      touched: true,\n    });\n    const formCopy = updateObject(this.state.orderForm, {\n      [id]: elCopy,\n    });\n    let formIsValid = true;\n    for (let el in formCopy) {\n      formIsValid = formCopy[el].valid && formIsValid;\n    }\n\n    this.setState({ orderForm: formCopy, formIsValid: formIsValid });\n  };\n\n  render() {\n    const formElArray = [];\n    for (let key in this.state.orderForm) {\n      formElArray.push({\n        id: key,\n        config: this.state.orderForm[key],\n      });\n    }\n    let form = (\n      <form onSubmit={this.handleOrder}>\n        {formElArray.map(el => (\n          <Input\n            key={el.id}\n            elementType={el.config.elementType}\n            elementConfig={el.config.elementConfig}\n            value={el.config.value}\n            handleChange={e => this.handleInputChange(e, el.id)}\n            invalid={!el.config.valid}\n            shouldValidate={el.config.validation}\n            touched={el.config.touched}\n          />\n        ))}\n        <Button buttonType=\"Success\" disabled={!this.state.formIsValid}>\n          ORDER\n        </Button>\n      </form>\n    );\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n    return (\n      <div className={classes.ContactData}>\n        <h4>Enter Your Contact Data:</h4>\n        {form}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    totalPrice: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) =>\n      dispatch(actions.purchaseBurger(orderData, token)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(ContactData, axios));\n\n// handleInputChange = (e, inputID) => {\n//   const { value } = e.target;\n//   const form = { ...this.state.orderForm };\n//   const formEl = { ...form[inputID] };\n//   formEl.value = value;\n//   formEl.valid = this.checkValidity(formEl.value, formEl.validation);\n//   formEl.touched = true;\n//   form[inputID] = formEl;\n\n//   let formIsValid = true;\n//   for (let key in form) {\n//     formIsValid = form[key].valid && formIsValid;\n//   }\n//   this.setState({\n//     orderForm: form,\n//     formIsValid: formIsValid,\n//   });\n// };\n","import React, { Component } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\nimport ContactData from \"./ContactData/ContactData\";\n\nclass Checkout extends Component {\n  handleCheckoutCancel = () => {\n    this.props.history.goBack();\n  };\n  handleCheckoutContinue = () => {\n    this.props.history.replace(\"/checkout/contact-data\");\n  };\n\n  render() {\n    let summary = <Redirect to=\"/\" />;\n\n    if (this.props.ingredients) {\n      const purchasedRedirect = this.props.purchased ? (\n        <Redirect to=\"/\" />\n      ) : null;\n      summary = (\n        <div>\n          {purchasedRedirect}\n          <CheckoutSummary\n            ingredients={this.props.ingredients}\n            checkoutContinue={this.handleCheckoutContinue}\n            checkoutCancel={this.handleCheckoutCancel}\n          />\n          <Route\n            path={this.props.match.path + \"/contact-data\"}\n            component={ContactData}\n          />\n        </div>\n      );\n    }\n    return summary;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    purchased: state.order.purchased,\n  };\n};\n\nexport default connect(mapStateToProps)(Checkout);\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst Input = props => {\n  let inputEl = null;\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputEl = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.handleChange}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputEl = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.handleChange}\n        />\n      );\n      break;\n    case \"select\":\n      inputEl = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.handleChange}\n        >\n          {props.elementConfig.options.map((option, i) => (\n            <option key={i} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputEl = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.handleChange}\n        />\n      );\n  }\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\n    );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputEl}\n      {validationError}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3PsXi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__20AK_\"};"],"sourceRoot":""}