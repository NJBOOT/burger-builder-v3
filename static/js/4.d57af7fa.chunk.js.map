{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","handleInputChange","e","controlName","target","updatedControls","updateObject","checkValidity","setState","handleSubmit","preventDefault","props","onAuth","handlSwitchAuthMode","prevState","this","isBuilding","authRedirectPath","onSetAuthRedirectPath","formElArray","key","push","id","config","form","map","el","handleChange","invalid","shouldValidate","loading","errorMessage","error","message","authRedirect","isAuth","to","className","classes","onSubmit","buttonType","handleClick","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputEl","inputClasses","InputElement","Invalid","join","onChange","options","option","i","displayValue","validationError","ValidationError","Label","label"],"mappings":"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","file":"static/js/4.d57af7fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { updateObject, checkValidity } from \"../../shared/utility\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"../../store/actions\";\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass Auth extends Component {\n  state = {\n    controls: {\n      email: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"email\",\n          placeholder: \"Email Address\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password: {\n        elementType: \"input\",\n        elementConfig: {\n          type: \"password\",\n          placeholder: \"Password\",\n        },\n        value: \"\",\n        validation: {\n          required: true,\n          minLength: 6,\n        },\n        valid: false,\n        touched: false,\n      },\n    },\n    isSignup: true,\n  };\n\n  componentDidMount() {\n    if (!this.props.isBuilding && this.props.authRedirectPath !== \"/\") {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  handleInputChange = (e, controlName) => {\n    const { value } = e.target;\n    const updatedControls = updateObject(this.state.controls, {\n      [controlName]: updateObject(this.state.controls[controlName], {\n        value: value,\n        valid: checkValidity(\n          value,\n          this.state.controls[controlName].validation\n        ),\n        touched: true,\n      }),\n    });\n    this.setState({ controls: updatedControls });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAuth(\n      this.state.controls.email.value,\n      this.state.controls.password.value,\n      this.state.isSignup\n    );\n  };\n\n  handlSwitchAuthMode = () => {\n    this.setState(prevState => {\n      return {\n        isSignup: !prevState.isSignup,\n      };\n    });\n  };\n\n  render() {\n    const formElArray = [];\n    for (let key in this.state.controls) {\n      formElArray.push({\n        id: key,\n        config: this.state.controls[key],\n      });\n    }\n\n    let form = formElArray.map(el => (\n      <Input\n        key={el.id}\n        elementType={el.config.elementType}\n        elementConfig={el.config.elementConfig}\n        value={el.config.value}\n        handleChange={e => this.handleInputChange(e, el.id)}\n        invalid={!el.config.valid}\n        shouldValidate={el.config.validation}\n        touched={el.config.touched}\n      />\n    ));\n\n    if (this.props.loading) {\n      form = <Spinner />;\n    }\n\n    let errorMessage = null;\n    if (this.props.error) {\n      errorMessage = <p>Error: {this.props.error.message}</p>;\n    }\n\n    let authRedirect = null;\n    if (this.props.isAuth) {\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\n    }\n    return (\n      <div className={classes.Auth}>\n        {authRedirect}\n        {errorMessage}\n        <form onSubmit={this.handleSubmit}>\n          {form}\n          <Button buttonType=\"Success\">SUBMIT</Button>\n        </form>\n        <Button buttonType=\"Danger\" handleClick={this.handlSwitchAuthMode}>\n          Switch to {this.state.isSignup ? \"SIGN IN\" : \"SIGN UP\"}\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    isBuilding: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) =>\n      dispatch(actions.auth(email, password, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n// handleInputChange = (e, controlName) => {\n//   const { value } = e.target;\n//   const updatedControls = {\n//     ...this.state.controls,\n//     [controlName]: {\n//       ...this.state.controls[controlName],\n//       value: value,\n//       valid: this.checkValidity(\n//         value,\n//         this.state.controls[controlName].validation\n//       ),\n//       touched: true,\n//     },\n//   };\n//   this.setState({ controls: updatedControls });\n// };\n","import React from \"react\";\nimport classes from \"./Input.module.css\";\n\nconst Input = props => {\n  let inputEl = null;\n  const inputClasses = [classes.InputElement];\n  if (props.invalid && props.shouldValidate && props.touched) {\n    inputClasses.push(classes.Invalid);\n  }\n\n  switch (props.elementType) {\n    case \"input\":\n      inputEl = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.handleChange}\n        />\n      );\n      break;\n    case \"textarea\":\n      inputEl = (\n        <textarea\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.handleChange}\n        />\n      );\n      break;\n    case \"select\":\n      inputEl = (\n        <select\n          className={inputClasses.join(\" \")}\n          value={props.value}\n          onChange={props.handleChange}\n        >\n          {props.elementConfig.options.map((option, i) => (\n            <option key={i} value={option.value}>\n              {option.displayValue}\n            </option>\n          ))}\n        </select>\n      );\n      break;\n    default:\n      inputEl = (\n        <input\n          className={inputClasses.join(\" \")}\n          {...props.elementConfig}\n          value={props.value}\n          onChange={props.handleChange}\n        />\n      );\n  }\n  let validationError = null;\n  if (props.invalid && props.touched) {\n    validationError = (\n      <p className={classes.ValidationError}>Please enter a valid value!</p>\n    );\n  }\n  return (\n    <div className={classes.Input}>\n      <label className={classes.Label}>{props.label}</label>\n      {inputEl}\n      {validationError}\n    </div>\n  );\n};\n\nexport default Input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\",\"ValidationError\":\"Input_ValidationError__qMR97\"};"],"sourceRoot":""}